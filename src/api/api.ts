// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * school-project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Ticket object data type for REST api functions.
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    photoURL?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    coordinates?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    description?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `Ticket`.
         * @summary Create a Ticket
         * @param {Ticket} ticket A new &#x60;Ticket&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTicket(ticket: Ticket, options: any = {}): RequestArgs {
            // verify required parameter 'ticket' is not null or undefined
            if (ticket === null || ticket === undefined) {
                throw new RequiredError('ticket','Required parameter ticket was null or undefined when calling createTicket.');
            }
            const localVarPath = `/tickets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Ticket" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(ticket !== undefined ? ticket : {}) : (ticket || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `Ticket`.
         * @summary Delete a Ticket
         * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicket(ticketId: string, options: any = {}): RequestArgs {
            // verify required parameter 'ticketId' is not null or undefined
            if (ticketId === null || ticketId === undefined) {
                throw new RequiredError('ticketId','Required parameter ticketId was null or undefined when calling deleteTicket.');
            }
            const localVarPath = `/tickets/{ticketId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `Ticket`.
         * @summary Get a Ticket
         * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicket(ticketId: string, options: any = {}): RequestArgs {
            // verify required parameter 'ticketId' is not null or undefined
            if (ticketId === null || ticketId === undefined) {
                throw new RequiredError('ticketId','Required parameter ticketId was null or undefined when calling getTicket.');
            }
            const localVarPath = `/tickets/{ticketId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `Ticket` entities.
         * @summary List All tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettickets(options: any = {}): RequestArgs {
            const localVarPath = `/tickets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `Ticket`.
         * @summary Create a Ticket
         * @param {Ticket} ticket A new &#x60;Ticket&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTicket(ticket: Ticket, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createTicket(ticket, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing `Ticket`.
         * @summary Delete a Ticket
         * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicket(ticketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteTicket(ticketId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the details of a single instance of a `Ticket`.
         * @summary Get a Ticket
         * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicket(ticketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getTicket(ticketId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of all `Ticket` entities.
         * @summary List All tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettickets(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).gettickets(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new instance of a `Ticket`.
         * @summary Create a Ticket
         * @param {Ticket} ticket A new &#x60;Ticket&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTicket(ticket: Ticket, options?: any) {
            return DefaultApiFp(configuration).createTicket(ticket, options)(axios, basePath);
        },
        /**
         * Deletes an existing `Ticket`.
         * @summary Delete a Ticket
         * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicket(ticketId: string, options?: any) {
            return DefaultApiFp(configuration).deleteTicket(ticketId, options)(axios, basePath);
        },
        /**
         * Gets the details of a single instance of a `Ticket`.
         * @summary Get a Ticket
         * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicket(ticketId: string, options?: any) {
            return DefaultApiFp(configuration).getTicket(ticketId, options)(axios, basePath);
        },
        /**
         * Gets a list of all `Ticket` entities.
         * @summary List All tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettickets(options?: any) {
            return DefaultApiFp(configuration).gettickets(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new instance of a `Ticket`.
     * @summary Create a Ticket
     * @param {Ticket} ticket A new &#x60;Ticket&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTicket(ticket: Ticket, options?: any) {
        return DefaultApiFp(this.configuration).createTicket(ticket, options)(this.axios, this.basePath);
    }

    /**
     * Deletes an existing `Ticket`.
     * @summary Delete a Ticket
     * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTicket(ticketId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTicket(ticketId, options)(this.axios, this.basePath);
    }

    /**
     * Gets the details of a single instance of a `Ticket`.
     * @summary Get a Ticket
     * @param {string} ticketId A unique identifier for a &#x60;Ticket&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTicket(ticketId: string, options?: any) {
        return DefaultApiFp(this.configuration).getTicket(ticketId, options)(this.axios, this.basePath);
    }

    /**
     * Gets a list of all `Ticket` entities.
     * @summary List All tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gettickets(options?: any) {
        return DefaultApiFp(this.configuration).gettickets(options)(this.axios, this.basePath);
    }

}


